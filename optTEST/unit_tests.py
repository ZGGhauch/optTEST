#  Unit Tests# Ziad Ghauchfrom optTEST.single_objective_opt import SingleObjectivefrom optTEST.constrained_opt import ConstrainedObjectivefrom optTEST.multi_objective_opt import MultiObjectiveimport unittestfrom numpy import piclass UnitTestSingleOpt(unittest.TestCase):    ''' Unit testing class for single objective optimization '''        # single objective        def test_unit_ackley(self):        self.assertEqual(SingleObjective([], [0.,0.], 'Ackley').ackley_function(), 0.0)            def test_unit_rastrigin(self):        self.assertEqual(SingleObjective([10.], [0.,0.], 'Rastrigin').rastrigin_function(), 0.0)    def test_unit_sphere(self):        self.assertEqual(SingleObjective([], [0.,0.], 'Sphere').sphere_function(), 0.0)    def test_unit_rosenbrock(self):        self.assertEqual(SingleObjective([], [1.,1.], 'Rosenbrock').rosenbrock_function(), 0.0)            def test_unit_beale(self):        self.assertEqual(SingleObjective([], [3.0,0.5], 'Beale').beale_function(), 0.0)    def test_unit_goldstein(self):        self.assertEqual(SingleObjective([], [0.0,-1.0], 'Goldstein-Price').goldstein_price_function(), 3.0)    def test_unit_booth(self):        self.assertEqual(SingleObjective([], [1.,3.], 'Booth').booth_function(), 0.0)            def test_unit_bukin(self):        self.assertEqual(SingleObjective([], [-10.,1.0], 'Bukin').bukin_function(), 0.0)            def test_unit_matyas(self):        self.assertEqual(SingleObjective([], [0.,0.], 'Matyas').matyas_function(), 0.0)            def test_unit_levi(self):        self.assertEqual(SingleObjective([], [1.,1.], 'Levi').levi_function(), 0.0)            def test_unit_himmelblau(self):        self.assertEqual(SingleObjective([], [3.0,2.0], 'Himmelblau').himmelblaus_function(), 0.0)            def test_unit_three_hump(self):        self.assertEqual(SingleObjective([], [0.,0.], 'Three-hump').three_hump_camel_function(), 0.0)            def test_unit_easom(self):        self.assertEqual(SingleObjective([], [pi,pi], 'Easom').easom_function(), -1.0)            def test_unit_crossintray(self):        self.assertEqual(SingleObjective([], [1.349,-1.349], 'Cross-in-tray').cross_in_tray_function(), -2.06)    def test_unit_eggholder(self):        self.assertEqual(SingleObjective([], [512., 404.23], 'Eggholder').eggholder_function(), -959.64)            def test_unit_holder_table(self):        self.assertEqual(SingleObjective([], [8.05,9.66], 'Holder-table').holder_table_function(), -3.85)            def test_unit_mccormik(self):        self.assertEqual(SingleObjective([], [-0.547,-1.547], 'McCormik').mccormik_function(), -1.91)            def test_unit_schaffer1(self):        self.assertEqual(SingleObjective([], [0.0,0.0], 'Schaffer1').schaffer_function_n2(), 0.0)            def test_unit_schaffer2(self):        self.assertEqual(SingleObjective([], [0.0,1.25], 'Schaffer2').schaffer_function_n4(), 0.29)            def test_unit_styblinski(self):        self.assertEqual(SingleObjective([], [-2.9,-2.9], 'Styblinski-tang').styblinski_tang_function(), -78.33)class UnitTestConstrainedOpt(unittest.TestCase):    ''' Unit testing class for constrained objective optimization '''        # constrained optimization        def test_unit_rosenbrock_constrained(self):        self.assertEqual(ConstrainedObjective([],[1.0,1.0],'Rosenbrock1',[[-1.5,1.5],[-0.5,2.5]]).rosenbrock_constrained_cubic_function(), 0.0)        def test_unit_rosenbrock_constrained_2(self):        self.assertEqual(ConstrainedObjective([],[1.0,1.0],'Rosenbrock2',[[-1.5,1.5],[-1.5,1.5]]).rosenbrock_constrained_line_function(), 0.0)    def test_unit_mishra(self):        self.assertEqual(ConstrainedObjective([],[-3.13,-1.58],'Mishra',[[-10.,0.],[-6.5,0.]]).mishra_bird_constrained_function(), -106.76)            def test_unit_townsend(self):        self.assertEqual(ConstrainedObjective([],[0.00,0.00],'Townsend',[[-2.25,2.25],[-2.5,1.75]]).townsend_function(), -1.00)            def test_unit_gomez(self):        self.assertEqual(ConstrainedObjective([],[0.089,-0.71],'Gomez-Levi',[[-1.0,0.75],[-1.0,1.0]]).gomez_levi_function(), -1.03)            def test_unit_simionescu(self):        self.assertEqual(ConstrainedObjective([1.0,0.2,8],[0.848,0.848],'Simionescu',[[-1.25,1.25],[-1.25,1.25]]).simionescu_function(), 0.07)     class UnitTestMultiOpt(unittest.TestCase):    ''' Unit testing class for multi-objective optimization '''        # multi-objective objective        def test_unit_binh_corn(self):        self.assertEqual(MultiObjective([],[0.0,0.00],'Binh-Corn',[[0.0,5.0],[0.0,3.0]]).binh_corn_function(), [0.0,50.0])        def test_unit_chankong_haimes(self):        self.assertEqual(MultiObjective([],[10.0,10.0],'Chankong-Haimes',[[-20.0,20.0],[-20.0,20.0]]).chankong_haimes_function(), [147.0,9.0])            def test_unit_fonseca_fleming(self):        self.assertEqual(MultiObjective([],[0.0,0.00],'Fonseca-Fleming',[[-4.0,4.0],[-4.0,4.0]]).fonseca_fleming_function(), [0.63, 0.63])                            def test_unit_poloni(self):        self.assertEqual(MultiObjective([],[0.0,0.00],'Poloni',[[-pi,pi],[-pi,pi]]).poloni_function(), [38.18, 10.0])                    def test_unit_viennet(self):        self.assertEqual(MultiObjective([],[0.0,0.00],'Viennet',[[-3.0,3.0],[-3.0,3.0]]).viennet_function(), [0.0, 17.04, -0.1])                if __name__ == '__main__':     unittest.main()