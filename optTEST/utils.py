# -------------------------------------------------------------# Class for visualizing 2D test functions## Author: Ziad Ghauch## -------------------------------------------------------------import numpy as npimport matplotlib.pyplot as pltfrom optTEST.single_objective_opt import *from optTEST.constrained_opt import *from optTEST.multi_objective_opt import *class PlotsFunctions:    ''' Class containing methods for plotting the optimization test functions    '''        def __init__(self, grid, xrange, yrange, func):        self.grid=grid        self.xrange=xrange        self.yrange=yrange        self.func=func           def plot_contour_2d(self):                x = np.linspace(self.xrange[0],self.xrange[1],self.grid)        y = np.linspace(self.yrange[0],self.yrange[1],self.grid)        X,Y = np.meshgrid(x,y)        Z=np.zeros((self.grid,self.grid))            if self.func=='Rosenbrock2':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = ConstrainedObjective([], [X[i,j],Y[i,j]], self.func, [self.xrange,self.yrange]).rosenbrock_constrained_line_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Rosenbrock1':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = ConstrainedObjective([], [X[i,j],Y[i,j]], self.func, [self.xrange,self.yrange]).rosenbrock_constrained_cubic_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Mishra':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = ConstrainedObjective([], [X[i,j],Y[i,j]], self.func, [self.xrange,self.yrange]).mishra_bird_constrained_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Townsend':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = ConstrainedObjective([], [X[i,j],Y[i,j]], self.func, [self.xrange,self.yrange]).townsend_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Gomez-Levi':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = ConstrainedObjective([], [X[i,j],Y[i,j]], self.func, [self.xrange,self.yrange]).gomez_levi_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Simionescu':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = ConstrainedObjective([1.0,0.2,8], [X[i,j],Y[i,j]], self.func, [self.xrange,self.yrange]).simionescu_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Rastrigin':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).rastrigin_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Ackley':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).ackley_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Sphere':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).sphere_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Rosenbrock':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).rosenbrock_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Beale':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).beale_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Goldstein-Price':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).goldstein_price_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Booth':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).booth_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Bukin':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).bukin_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Matyas':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).matyas_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Levi':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).levi_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Himmelblau':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).himmelblaus_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Three-hump-camel':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).three_hump_camel_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Easom':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).easom_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Cross-in-tray':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).cross_in_tray_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Eggholder':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).eggholder_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Holder-table':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).holder_table_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='McCormik':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).mccormik_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Schaffer1':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).schaffer_function_n2()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Schaffer2':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).schaffer_function_n4()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            elif self.func=='Styblinskiâ€“Tang':            for i in range(self.grid):                for j in range(self.grid):                    Z[i,j] = SingleObjective([], [X[i,j],Y[i,j]], self.func).styblinski_tang_function()            plt.contourf(X, Y, Z);            plt.colorbar();            plt.title(str(self.func)+' Function');            else:            print ('Function plot not supported')        